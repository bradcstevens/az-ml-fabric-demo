{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.38.3.11034",
      "templateHash": "3173930496568802341"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "defaultValue": "dev",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name of the environment which is used to generate a short unique hash for resources."
      }
    },
    "location": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Primary location for all resources"
      }
    },
    "principalId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Id of the user or app to assign application roles"
      }
    },
    "fabricAdminEmail": {
      "type": "string",
      "defaultValue": "brad.stevens@MngEnvMCAP786696.onmicrosoft.com",
      "metadata": {
        "description": "Email address of the Fabric capacity administrator"
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "analysisServicesServers": "as",
      "apiManagementService": "apim-",
      "appConfigurationConfigurationStores": "appcs-",
      "appManagedEnvironments": "cae-",
      "appContainerApps": "ca-",
      "authorizationPolicyDefinitions": "policy-",
      "automationAutomationAccounts": "aa-",
      "blueprintBlueprints": "bp-",
      "blueprintBlueprintsArtifacts": "bpa-",
      "cacheRedis": "redis-",
      "cdnProfiles": "cdnp-",
      "cdnProfilesEndpoints": "cdne-",
      "cognitiveServicesAccounts": "cog-",
      "cognitiveServicesFormRecognizer": "cog-fr-",
      "cognitiveServicesTextAnalytics": "cog-ta-",
      "computeAvailabilitySets": "avail-",
      "computeCloudServices": "cld-",
      "computeDiskEncryptionSets": "des-",
      "computeDisks": "disk-",
      "computeGalleries": "gal-",
      "computeSnapshots": "snap-",
      "computeVirtualMachines": "vm-",
      "computeVirtualMachineScaleSets": "vmss-",
      "containerInstanceContainerGroups": "ci-",
      "containerRegistryRegistries": "cr",
      "containerServiceManagedClusters": "aks-",
      "databricksWorkspaces": "dbw-",
      "dataFactoryFactories": "adf-",
      "dataLakeAnalyticsAccounts": "dla-",
      "dataLakeStoreAccounts": "dls-",
      "dataMigrationServices": "dms-",
      "dBforMySQLServers": "mysql-",
      "dBforPostgreSQLServers": "psql-",
      "devicesIotHubs": "iot-",
      "devicesProvisioningServices": "provs-",
      "devicesProvisioningServicesCertificates": "pcert-",
      "documentDBDatabaseAccounts": "cosmos-",
      "eventGridDomains": "evgd-",
      "eventGridTopics": "evgt-",
      "eventHubNamespaces": "evhns-",
      "eventHubNamespacesEventHubs": "evh-",
      "hdInsightClustersHadoop": "hadoop-",
      "hdInsightClustersHbase": "hbase-",
      "hdInsightClustersKafka": "kafka-",
      "hdInsightClustersMl": "mls-",
      "hdInsightClustersSpark": "spark-",
      "hdInsightClustersStorm": "storm-",
      "hybridComputeMachines": "arcs-",
      "hybridKubernetesConnectedClusters": "arck-",
      "insightsActionGroups": "ag-",
      "insightsComponents": "appi-",
      "keyVaultVaults": "kv-",
      "kubernetesConnectedClusters": "arck-",
      "kustoClusters": "dec-",
      "loadTesting": "lt-",
      "logicWorkflows": "logic-",
      "machineLearningServicesWorkspaces": "mlw-",
      "managedIdentityUserAssignedIdentities": "id-",
      "managementManagementGroups": "mg-",
      "migrateAssessmentProjects": "migr-",
      "networkApplicationGateways": "agw-",
      "networkApplicationSecurityGroups": "asg-",
      "networkAzureFirewalls": "afw-",
      "networkBastionHosts": "bas-",
      "networkConnections": "con-",
      "networkDnsZones": "dnsz-",
      "networkExpressRouteCircuits": "erc-",
      "networkFirewallPolicies": "afwp-",
      "networkFirewallPolicyRuleGroups": "wafrg-",
      "networkFrontDoors": "fd-",
      "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
      "networkLoadBalancers": "lb-",
      "networkLoadBalancersInbound": "lbi-",
      "networkLoadBalancersInternal": "lbi-",
      "networkLoadBalancersOutbound": "lbo-",
      "networkLocalNetworkGateways": "lgw-",
      "networkNatGateways": "ng-",
      "networkNetworkInterfaces": "nic-",
      "networkNetworkSecurityGroups": "nsg-",
      "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
      "networkNetworkWatchers": "nw-",
      "networkPrivateDnsZones": "pdnsz-",
      "networkPrivateLinkServices": "pl-",
      "networkPublicIPAddresses": "pip-",
      "networkPublicIPPrefixes": "ippre-",
      "networkRouteFilters": "rf-",
      "networkRouteTables": "rt-",
      "networkRouteTablesRoutes": "udr-",
      "networkTrafficManagerProfiles": "traf-",
      "networkVirtualNetworkGateways": "vgw-",
      "networkVirtualNetworks": "vnet-",
      "networkVirtualNetworksSubnets": "snet-",
      "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
      "networkVirtualWans": "vwan-",
      "networkVpnGateways": "vpng-",
      "networkVpnGatewaysVpnConnections": "vcn-",
      "networkVpnGatewaysVpnSites": "vst-",
      "notificationHubsNamespaces": "ntfns-",
      "notificationHubsNamespacesNotificationHubs": "ntf-",
      "operationalInsightsWorkspaces": "log-",
      "portalDashboards": "dash-",
      "powerBIDedicatedCapacities": "pbi-",
      "purviewAccounts": "pview-",
      "recoveryServicesVaults": "rsv-",
      "resourcesResourceGroups": "rg-",
      "searchSearchServices": "srch-",
      "serviceBusNamespaces": "sb-",
      "serviceBusNamespacesQueues": "sbq-",
      "serviceBusNamespacesTopics": "sbt-",
      "serviceEndPointPolicies": "se-",
      "serviceFabricClusters": "sf-",
      "signalRServiceSignalR": "sigr-",
      "sqlManagedInstances": "sqlmi-",
      "sqlServers": "sql-",
      "sqlServersFirewallRules": "sqlfw-",
      "sqlServersDatabase": "sqldb-",
      "storageStorageAccounts": "st",
      "storageStorageAccountsFileServices": "file-",
      "storageStorageAccountsBlobServices": "blob-",
      "storageStorageAccountsQueueServices": "queue-",
      "storageStorageAccountsTableServices": "table-",
      "streamAnalyticsCluster": "asa-",
      "synapseWorkspaces": "syn-",
      "synapseWorkspacesAnalyticsWorkspaces": "synw-",
      "synapseWorkspacesSqlPoolsDedicated": "syndp-",
      "synapseWorkspacesSqlPoolsSpark": "synsp-",
      "timeSeriesInsightsEnvironments": "tsi-",
      "webServerFarms": "plan-",
      "webSitesAppService": "app-",
      "webSitesAppServiceEnvironment": "ase-",
      "webSitesFunctions": "func-",
      "fabricWorkspaces": "fabric-",
      "fabricCapacities": "fabriccap-"
    },
    "abbrs": "[variables('$fxv#0')]",
    "resourceToken": "[toLower(uniqueString(subscription().id, parameters('environmentName'), parameters('location')))]",
    "tags": {
      "azd_env_name": "[parameters('environmentName')]",
      "project": "az-ml-fabric-demo",
      "purpose": "ml-fabric-integration"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "network",
      "resourceGroup": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environmentName": {
            "value": "[parameters('environmentName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "resourceToken": {
            "value": "[variables('resourceToken')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.3.11034",
              "templateHash": "16265583480244286962"
            }
          },
          "parameters": {
            "environmentName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "resourceToken": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "variables": {
            "$fxv#0": {
              "analysisServicesServers": "as",
              "apiManagementService": "apim-",
              "appConfigurationConfigurationStores": "appcs-",
              "appManagedEnvironments": "cae-",
              "appContainerApps": "ca-",
              "authorizationPolicyDefinitions": "policy-",
              "automationAutomationAccounts": "aa-",
              "blueprintBlueprints": "bp-",
              "blueprintBlueprintsArtifacts": "bpa-",
              "cacheRedis": "redis-",
              "cdnProfiles": "cdnp-",
              "cdnProfilesEndpoints": "cdne-",
              "cognitiveServicesAccounts": "cog-",
              "cognitiveServicesFormRecognizer": "cog-fr-",
              "cognitiveServicesTextAnalytics": "cog-ta-",
              "computeAvailabilitySets": "avail-",
              "computeCloudServices": "cld-",
              "computeDiskEncryptionSets": "des-",
              "computeDisks": "disk-",
              "computeGalleries": "gal-",
              "computeSnapshots": "snap-",
              "computeVirtualMachines": "vm-",
              "computeVirtualMachineScaleSets": "vmss-",
              "containerInstanceContainerGroups": "ci-",
              "containerRegistryRegistries": "cr",
              "containerServiceManagedClusters": "aks-",
              "databricksWorkspaces": "dbw-",
              "dataFactoryFactories": "adf-",
              "dataLakeAnalyticsAccounts": "dla-",
              "dataLakeStoreAccounts": "dls-",
              "dataMigrationServices": "dms-",
              "dBforMySQLServers": "mysql-",
              "dBforPostgreSQLServers": "psql-",
              "devicesIotHubs": "iot-",
              "devicesProvisioningServices": "provs-",
              "devicesProvisioningServicesCertificates": "pcert-",
              "documentDBDatabaseAccounts": "cosmos-",
              "eventGridDomains": "evgd-",
              "eventGridTopics": "evgt-",
              "eventHubNamespaces": "evhns-",
              "eventHubNamespacesEventHubs": "evh-",
              "hdInsightClustersHadoop": "hadoop-",
              "hdInsightClustersHbase": "hbase-",
              "hdInsightClustersKafka": "kafka-",
              "hdInsightClustersMl": "mls-",
              "hdInsightClustersSpark": "spark-",
              "hdInsightClustersStorm": "storm-",
              "hybridComputeMachines": "arcs-",
              "hybridKubernetesConnectedClusters": "arck-",
              "insightsActionGroups": "ag-",
              "insightsComponents": "appi-",
              "keyVaultVaults": "kv-",
              "kubernetesConnectedClusters": "arck-",
              "kustoClusters": "dec-",
              "loadTesting": "lt-",
              "logicWorkflows": "logic-",
              "machineLearningServicesWorkspaces": "mlw-",
              "managedIdentityUserAssignedIdentities": "id-",
              "managementManagementGroups": "mg-",
              "migrateAssessmentProjects": "migr-",
              "networkApplicationGateways": "agw-",
              "networkApplicationSecurityGroups": "asg-",
              "networkAzureFirewalls": "afw-",
              "networkBastionHosts": "bas-",
              "networkConnections": "con-",
              "networkDnsZones": "dnsz-",
              "networkExpressRouteCircuits": "erc-",
              "networkFirewallPolicies": "afwp-",
              "networkFirewallPolicyRuleGroups": "wafrg-",
              "networkFrontDoors": "fd-",
              "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
              "networkLoadBalancers": "lb-",
              "networkLoadBalancersInbound": "lbi-",
              "networkLoadBalancersInternal": "lbi-",
              "networkLoadBalancersOutbound": "lbo-",
              "networkLocalNetworkGateways": "lgw-",
              "networkNatGateways": "ng-",
              "networkNetworkInterfaces": "nic-",
              "networkNetworkSecurityGroups": "nsg-",
              "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
              "networkNetworkWatchers": "nw-",
              "networkPrivateDnsZones": "pdnsz-",
              "networkPrivateLinkServices": "pl-",
              "networkPublicIPAddresses": "pip-",
              "networkPublicIPPrefixes": "ippre-",
              "networkRouteFilters": "rf-",
              "networkRouteTables": "rt-",
              "networkRouteTablesRoutes": "udr-",
              "networkTrafficManagerProfiles": "traf-",
              "networkVirtualNetworkGateways": "vgw-",
              "networkVirtualNetworks": "vnet-",
              "networkVirtualNetworksSubnets": "snet-",
              "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
              "networkVirtualWans": "vwan-",
              "networkVpnGateways": "vpng-",
              "networkVpnGatewaysVpnConnections": "vcn-",
              "networkVpnGatewaysVpnSites": "vst-",
              "notificationHubsNamespaces": "ntfns-",
              "notificationHubsNamespacesNotificationHubs": "ntf-",
              "operationalInsightsWorkspaces": "log-",
              "portalDashboards": "dash-",
              "powerBIDedicatedCapacities": "pbi-",
              "purviewAccounts": "pview-",
              "recoveryServicesVaults": "rsv-",
              "resourcesResourceGroups": "rg-",
              "searchSearchServices": "srch-",
              "serviceBusNamespaces": "sb-",
              "serviceBusNamespacesQueues": "sbq-",
              "serviceBusNamespacesTopics": "sbt-",
              "serviceEndPointPolicies": "se-",
              "serviceFabricClusters": "sf-",
              "signalRServiceSignalR": "sigr-",
              "sqlManagedInstances": "sqlmi-",
              "sqlServers": "sql-",
              "sqlServersFirewallRules": "sqlfw-",
              "sqlServersDatabase": "sqldb-",
              "storageStorageAccounts": "st",
              "storageStorageAccountsFileServices": "file-",
              "storageStorageAccountsBlobServices": "blob-",
              "storageStorageAccountsQueueServices": "queue-",
              "storageStorageAccountsTableServices": "table-",
              "streamAnalyticsCluster": "asa-",
              "synapseWorkspaces": "syn-",
              "synapseWorkspacesAnalyticsWorkspaces": "synw-",
              "synapseWorkspacesSqlPoolsDedicated": "syndp-",
              "synapseWorkspacesSqlPoolsSpark": "synsp-",
              "timeSeriesInsightsEnvironments": "tsi-",
              "webServerFarms": "plan-",
              "webSitesAppService": "app-",
              "webSitesAppServiceEnvironment": "ase-",
              "webSitesFunctions": "func-",
              "fabricWorkspaces": "fabric-",
              "fabricCapacities": "fabriccap-"
            },
            "abbrs": "[variables('$fxv#0')]",
            "vnetName": "[format('{0}{1}-{2}', variables('abbrs').networkVirtualNetworks, parameters('environmentName'), parameters('resourceToken'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2023-05-01",
              "name": "[variables('vnetName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "10.0.0.0/16"
                  ]
                },
                "subnets": [
                  {
                    "name": "ml-workspace-subnet",
                    "properties": {
                      "addressPrefix": "10.0.1.0/24",
                      "privateEndpointNetworkPolicies": "Disabled",
                      "privateLinkServiceNetworkPolicies": "Enabled",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-ml-workspace-nsg', variables('vnetName')))]"
                      },
                      "routeTable": {
                        "id": "[resourceId('Microsoft.Network/routeTables', format('{0}-ml-workspace-rt', variables('vnetName')))]"
                      }
                    }
                  },
                  {
                    "name": "ml-compute-subnet",
                    "properties": {
                      "addressPrefix": "10.0.2.0/24",
                      "delegations": [
                        {
                          "name": "Microsoft.MachineLearningServices/workspaces",
                          "properties": {
                            "serviceName": "Microsoft.MachineLearningServices/workspaces"
                          }
                        }
                      ],
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-compute-nsg', variables('vnetName')))]"
                      },
                      "routeTable": {
                        "id": "[resourceId('Microsoft.Network/routeTables', format('{0}-compute-rt', variables('vnetName')))]"
                      }
                    }
                  },
                  {
                    "name": "private-endpoints-subnet",
                    "properties": {
                      "addressPrefix": "10.0.3.0/24",
                      "privateEndpointNetworkPolicies": "Disabled",
                      "privateLinkServiceNetworkPolicies": "Enabled",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-private-endpoints-nsg', variables('vnetName')))]"
                      }
                    }
                  },
                  {
                    "name": "management-subnet",
                    "properties": {
                      "addressPrefix": "10.0.4.0/24",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-management-nsg', variables('vnetName')))]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-compute-nsg', variables('vnetName')))]",
                "[resourceId('Microsoft.Network/routeTables', format('{0}-compute-rt', variables('vnetName')))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-management-nsg', variables('vnetName')))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-ml-workspace-nsg', variables('vnetName')))]",
                "[resourceId('Microsoft.Network/routeTables', format('{0}-ml-workspace-rt', variables('vnetName')))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-private-endpoints-nsg', variables('vnetName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}-ml-workspace-nsg', variables('vnetName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "AllowAzureMLWorkspaceInbound",
                    "properties": {
                      "description": "Allow Azure ML workspace communication",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "AzureMachineLearning",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 1000,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "AllowPrivateEndpointsInbound",
                    "properties": {
                      "description": "Allow private endpoint connections",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 1100,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "AllowAzureResourceManagerOutbound",
                    "properties": {
                      "description": "Allow outbound to Azure Resource Manager",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "AzureResourceManager",
                      "access": "Allow",
                      "priority": 1000,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "AllowStorageOutbound",
                    "properties": {
                      "description": "Allow outbound to Azure Storage",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "Storage",
                      "access": "Allow",
                      "priority": 1100,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "DenyAllInbound",
                    "properties": {
                      "description": "Deny all other inbound traffic",
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Deny",
                      "priority": 4096,
                      "direction": "Inbound"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}-compute-nsg', variables('vnetName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "AllowAzureMLServices",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRanges": [
                        "443",
                        "8080",
                        "18881"
                      ],
                      "sourceAddressPrefix": "AzureMachineLearning",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 1000,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "AllowBatchNodeManagement",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "29876-29877",
                      "sourceAddressPrefix": "BatchNodeManagement",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 1100,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "DenyAllInbound",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Deny",
                      "priority": 4096,
                      "direction": "Inbound"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}-private-endpoints-nsg', variables('vnetName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "AllowPrivateEndpointsInbound",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 1000,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "DenyAllInbound",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Deny",
                      "priority": 4096,
                      "direction": "Inbound"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}-management-nsg', variables('vnetName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "AllowAzureResourceManagerOutbound",
                    "properties": {
                      "description": "Allow management traffic to Azure Resource Manager",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "AzureResourceManager",
                      "access": "Allow",
                      "priority": 1000,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "AllowAzureMonitorOutbound",
                    "properties": {
                      "description": "Allow monitoring and diagnostics",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "AzureMonitor",
                      "access": "Allow",
                      "priority": 1100,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "DenyAllInbound",
                    "properties": {
                      "description": "Deny all inbound traffic",
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Deny",
                      "priority": 4096,
                      "direction": "Inbound"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/routeTables",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}-ml-workspace-rt', variables('vnetName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "routes": [
                  {
                    "name": "AzureMLServices",
                    "properties": {
                      "addressPrefix": "AzureMachineLearning",
                      "nextHopType": "Internet"
                    }
                  },
                  {
                    "name": "AzureResourceManager",
                    "properties": {
                      "addressPrefix": "AzureResourceManager",
                      "nextHopType": "Internet"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/routeTables",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}-compute-rt', variables('vnetName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "routes": [
                  {
                    "name": "AzureMLServices",
                    "properties": {
                      "addressPrefix": "AzureMachineLearning",
                      "nextHopType": "Internet"
                    }
                  },
                  {
                    "name": "Storage",
                    "properties": {
                      "addressPrefix": "Storage",
                      "nextHopType": "Internet"
                    }
                  }
                ]
              }
            }
          ],
          "outputs": {
            "vnetName": {
              "type": "string",
              "value": "[variables('vnetName')]"
            },
            "vnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            },
            "vnetAddressSpace": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2023-05-01').addressSpace.addressPrefixes[0]]"
            },
            "mlWorkspaceSubnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2023-05-01').subnets[0].id]"
            },
            "mlWorkspaceSubnetCidr": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2023-05-01').subnets[0].properties.addressPrefix]"
            },
            "computeSubnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2023-05-01').subnets[1].id]"
            },
            "computeSubnetCidr": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2023-05-01').subnets[1].properties.addressPrefix]"
            },
            "privateEndpointsSubnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2023-05-01').subnets[2].id]"
            },
            "privateEndpointsSubnetCidr": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2023-05-01').subnets[2].properties.addressPrefix]"
            },
            "managementSubnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2023-05-01').subnets[3].id]"
            },
            "managementSubnetCidr": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2023-05-01').subnets[3].properties.addressPrefix]"
            },
            "mlWorkspaceNsgId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-ml-workspace-nsg', variables('vnetName')))]"
            },
            "computeNsgId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-compute-nsg', variables('vnetName')))]"
            },
            "privateEndpointsNsgId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-private-endpoints-nsg', variables('vnetName')))]"
            },
            "managementNsgId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-management-nsg', variables('vnetName')))]"
            },
            "computeSubnetDelegation": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2023-05-01').subnets[1].properties.delegations[0].properties.serviceName]"
            },
            "mlWorkspacePrivateEndpointPolicies": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2023-05-01').subnets[0].properties.privateEndpointNetworkPolicies]"
            },
            "privateEndpointsPrivateEndpointPolicies": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2023-05-01').subnets[2].properties.privateEndpointNetworkPolicies]"
            },
            "mlWorkspaceRouteTableId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/routeTables', format('{0}-ml-workspace-rt', variables('vnetName')))]"
            },
            "computeRouteTableId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/routeTables', format('{0}-compute-rt', variables('vnetName')))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "dns",
      "resourceGroup": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environmentName": {
            "value": "[parameters('environmentName')]"
          },
          "vnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'network'), '2025-04-01').outputs.vnetId.value]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.3.11034",
              "templateHash": "12717598985408287553"
            }
          },
          "parameters": {
            "environmentName": {
              "type": "string"
            },
            "vnetId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "variables": {
            "storageSuffix": "[environment().suffixes.storage]",
            "keyVaultSuffix": "[format('vault{0}', environment().suffixes.keyvaultDns)]",
            "acrSuffix": "azurecr.io",
            "azureMLSuffix": "api.azureml.ms"
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[format('privatelink.blob.{0}', variables('storageSuffix'))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[format('privatelink.file.{0}', variables('storageSuffix'))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[format('privatelink.{0}', variables('keyVaultSuffix'))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[format('privatelink.{0}', variables('acrSuffix'))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[format('privatelink.{0}', variables('azureMLSuffix'))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', format('privatelink.blob.{0}', variables('storageSuffix')), format('{0}-blob-link', parameters('environmentName')))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('vnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.blob.{0}', variables('storageSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', format('privatelink.file.{0}', variables('storageSuffix')), format('{0}-file-link', parameters('environmentName')))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('vnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.file.{0}', variables('storageSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', format('privatelink.{0}', variables('keyVaultSuffix')), format('{0}-keyvault-link', parameters('environmentName')))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('vnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.{0}', variables('keyVaultSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', format('privatelink.{0}', variables('acrSuffix')), format('{0}-acr-link', parameters('environmentName')))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('vnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.{0}', variables('acrSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', format('privatelink.{0}', variables('azureMLSuffix')), format('{0}-azureml-link', parameters('environmentName')))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('vnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.{0}', variables('azureMLSuffix')))]"
              ]
            }
          ],
          "outputs": {
            "blobDnsZoneName": {
              "type": "string",
              "value": "[format('privatelink.blob.{0}', variables('storageSuffix'))]"
            },
            "fileDnsZoneName": {
              "type": "string",
              "value": "[format('privatelink.file.{0}', variables('storageSuffix'))]"
            },
            "keyVaultDnsZoneName": {
              "type": "string",
              "value": "[format('privatelink.{0}', variables('keyVaultSuffix'))]"
            },
            "acrDnsZoneName": {
              "type": "string",
              "value": "[format('privatelink.{0}', variables('acrSuffix'))]"
            },
            "azureMLDnsZoneName": {
              "type": "string",
              "value": "[format('privatelink.{0}', variables('azureMLSuffix'))]"
            },
            "blobVnetLinkId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', format('privatelink.blob.{0}', variables('storageSuffix')), format('{0}-blob-link', parameters('environmentName')))]"
            },
            "fileVnetLinkId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', format('privatelink.file.{0}', variables('storageSuffix')), format('{0}-file-link', parameters('environmentName')))]"
            },
            "keyVaultVnetLinkId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', format('privatelink.{0}', variables('keyVaultSuffix')), format('{0}-keyvault-link', parameters('environmentName')))]"
            },
            "acrVnetLinkId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', format('privatelink.{0}', variables('acrSuffix')), format('{0}-acr-link', parameters('environmentName')))]"
            },
            "azureMLVnetLinkId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', format('privatelink.{0}', variables('azureMLSuffix')), format('{0}-azureml-link', parameters('environmentName')))]"
            },
            "autoRegistrationEnabled": {
              "type": "bool",
              "value": false
            },
            "dnsZonesLocation": {
              "type": "string",
              "value": "global"
            },
            "blobDnsZoneId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.blob.{0}', variables('storageSuffix')))]"
            },
            "fileDnsZoneId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.file.{0}', variables('storageSuffix')))]"
            },
            "keyVaultDnsZoneId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.{0}', variables('keyVaultSuffix')))]"
            },
            "acrDnsZoneId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.{0}', variables('acrSuffix')))]"
            },
            "azureMLDnsZoneId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink.{0}', variables('azureMLSuffix')))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'network')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "security",
      "resourceGroup": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environmentName": {
            "value": "[parameters('environmentName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "resourceToken": {
            "value": "[variables('resourceToken')]"
          },
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "privateEndpointsSubnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'network'), '2025-04-01').outputs.privateEndpointsSubnetId.value]"
          },
          "keyVaultDnsZoneId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'dns'), '2025-04-01').outputs.keyVaultDnsZoneId.value]"
          },
          "acrDnsZoneId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'dns'), '2025-04-01').outputs.acrDnsZoneId.value]"
          },
          "blobDnsZoneId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'dns'), '2025-04-01').outputs.blobDnsZoneId.value]"
          },
          "fileDnsZoneId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'dns'), '2025-04-01').outputs.fileDnsZoneId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.3.11034",
              "templateHash": "8403428219986476655"
            }
          },
          "parameters": {
            "environmentName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "resourceToken": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "privateEndpointsSubnetId": {
              "type": "string"
            },
            "keyVaultDnsZoneId": {
              "type": "string"
            },
            "acrDnsZoneId": {
              "type": "string"
            },
            "blobDnsZoneId": {
              "type": "string"
            },
            "fileDnsZoneId": {
              "type": "string"
            }
          },
          "variables": {
            "$fxv#0": {
              "analysisServicesServers": "as",
              "apiManagementService": "apim-",
              "appConfigurationConfigurationStores": "appcs-",
              "appManagedEnvironments": "cae-",
              "appContainerApps": "ca-",
              "authorizationPolicyDefinitions": "policy-",
              "automationAutomationAccounts": "aa-",
              "blueprintBlueprints": "bp-",
              "blueprintBlueprintsArtifacts": "bpa-",
              "cacheRedis": "redis-",
              "cdnProfiles": "cdnp-",
              "cdnProfilesEndpoints": "cdne-",
              "cognitiveServicesAccounts": "cog-",
              "cognitiveServicesFormRecognizer": "cog-fr-",
              "cognitiveServicesTextAnalytics": "cog-ta-",
              "computeAvailabilitySets": "avail-",
              "computeCloudServices": "cld-",
              "computeDiskEncryptionSets": "des-",
              "computeDisks": "disk-",
              "computeGalleries": "gal-",
              "computeSnapshots": "snap-",
              "computeVirtualMachines": "vm-",
              "computeVirtualMachineScaleSets": "vmss-",
              "containerInstanceContainerGroups": "ci-",
              "containerRegistryRegistries": "cr",
              "containerServiceManagedClusters": "aks-",
              "databricksWorkspaces": "dbw-",
              "dataFactoryFactories": "adf-",
              "dataLakeAnalyticsAccounts": "dla-",
              "dataLakeStoreAccounts": "dls-",
              "dataMigrationServices": "dms-",
              "dBforMySQLServers": "mysql-",
              "dBforPostgreSQLServers": "psql-",
              "devicesIotHubs": "iot-",
              "devicesProvisioningServices": "provs-",
              "devicesProvisioningServicesCertificates": "pcert-",
              "documentDBDatabaseAccounts": "cosmos-",
              "eventGridDomains": "evgd-",
              "eventGridTopics": "evgt-",
              "eventHubNamespaces": "evhns-",
              "eventHubNamespacesEventHubs": "evh-",
              "hdInsightClustersHadoop": "hadoop-",
              "hdInsightClustersHbase": "hbase-",
              "hdInsightClustersKafka": "kafka-",
              "hdInsightClustersMl": "mls-",
              "hdInsightClustersSpark": "spark-",
              "hdInsightClustersStorm": "storm-",
              "hybridComputeMachines": "arcs-",
              "hybridKubernetesConnectedClusters": "arck-",
              "insightsActionGroups": "ag-",
              "insightsComponents": "appi-",
              "keyVaultVaults": "kv-",
              "kubernetesConnectedClusters": "arck-",
              "kustoClusters": "dec-",
              "loadTesting": "lt-",
              "logicWorkflows": "logic-",
              "machineLearningServicesWorkspaces": "mlw-",
              "managedIdentityUserAssignedIdentities": "id-",
              "managementManagementGroups": "mg-",
              "migrateAssessmentProjects": "migr-",
              "networkApplicationGateways": "agw-",
              "networkApplicationSecurityGroups": "asg-",
              "networkAzureFirewalls": "afw-",
              "networkBastionHosts": "bas-",
              "networkConnections": "con-",
              "networkDnsZones": "dnsz-",
              "networkExpressRouteCircuits": "erc-",
              "networkFirewallPolicies": "afwp-",
              "networkFirewallPolicyRuleGroups": "wafrg-",
              "networkFrontDoors": "fd-",
              "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
              "networkLoadBalancers": "lb-",
              "networkLoadBalancersInbound": "lbi-",
              "networkLoadBalancersInternal": "lbi-",
              "networkLoadBalancersOutbound": "lbo-",
              "networkLocalNetworkGateways": "lgw-",
              "networkNatGateways": "ng-",
              "networkNetworkInterfaces": "nic-",
              "networkNetworkSecurityGroups": "nsg-",
              "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
              "networkNetworkWatchers": "nw-",
              "networkPrivateDnsZones": "pdnsz-",
              "networkPrivateLinkServices": "pl-",
              "networkPublicIPAddresses": "pip-",
              "networkPublicIPPrefixes": "ippre-",
              "networkRouteFilters": "rf-",
              "networkRouteTables": "rt-",
              "networkRouteTablesRoutes": "udr-",
              "networkTrafficManagerProfiles": "traf-",
              "networkVirtualNetworkGateways": "vgw-",
              "networkVirtualNetworks": "vnet-",
              "networkVirtualNetworksSubnets": "snet-",
              "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
              "networkVirtualWans": "vwan-",
              "networkVpnGateways": "vpng-",
              "networkVpnGatewaysVpnConnections": "vcn-",
              "networkVpnGatewaysVpnSites": "vst-",
              "notificationHubsNamespaces": "ntfns-",
              "notificationHubsNamespacesNotificationHubs": "ntf-",
              "operationalInsightsWorkspaces": "log-",
              "portalDashboards": "dash-",
              "powerBIDedicatedCapacities": "pbi-",
              "purviewAccounts": "pview-",
              "recoveryServicesVaults": "rsv-",
              "resourcesResourceGroups": "rg-",
              "searchSearchServices": "srch-",
              "serviceBusNamespaces": "sb-",
              "serviceBusNamespacesQueues": "sbq-",
              "serviceBusNamespacesTopics": "sbt-",
              "serviceEndPointPolicies": "se-",
              "serviceFabricClusters": "sf-",
              "signalRServiceSignalR": "sigr-",
              "sqlManagedInstances": "sqlmi-",
              "sqlServers": "sql-",
              "sqlServersFirewallRules": "sqlfw-",
              "sqlServersDatabase": "sqldb-",
              "storageStorageAccounts": "st",
              "storageStorageAccountsFileServices": "file-",
              "storageStorageAccountsBlobServices": "blob-",
              "storageStorageAccountsQueueServices": "queue-",
              "storageStorageAccountsTableServices": "table-",
              "streamAnalyticsCluster": "asa-",
              "synapseWorkspaces": "syn-",
              "synapseWorkspacesAnalyticsWorkspaces": "synw-",
              "synapseWorkspacesSqlPoolsDedicated": "syndp-",
              "synapseWorkspacesSqlPoolsSpark": "synsp-",
              "timeSeriesInsightsEnvironments": "tsi-",
              "webServerFarms": "plan-",
              "webSitesAppService": "app-",
              "webSitesAppServiceEnvironment": "ase-",
              "webSitesFunctions": "func-",
              "fabricWorkspaces": "fabric-",
              "fabricCapacities": "fabriccap-"
            },
            "abbrs": "[variables('$fxv#0')]",
            "keyVaultName": "[take(format('{0}{1}{2}', variables('abbrs').keyVaultVaults, replace(parameters('environmentName'), '-', ''), parameters('resourceToken')), 24)]",
            "storageAccountName": "[if(greaterOrEquals(length(format('st{0}{1}', replace(parameters('environmentName'), '-', ''), parameters('resourceToken'))), 3), take(format('st{0}{1}', replace(parameters('environmentName'), '-', ''), parameters('resourceToken')), 24), take(format('st{0}{1}demo', replace(parameters('environmentName'), '-', ''), parameters('resourceToken')), 24))]",
            "containerRegistryName": "[if(greaterOrEquals(length(format('cr{0}{1}', replace(parameters('environmentName'), '-', ''), parameters('resourceToken'))), 5), take(format('cr{0}{1}', replace(parameters('environmentName'), '-', ''), parameters('resourceToken')), 50), format('cr{0}{1}demo', replace(parameters('environmentName'), '-', ''), parameters('resourceToken')))]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[variables('keyVaultName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "tenantId": "[tenant().tenantId]",
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "accessPolicies": [],
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": true,
                "enableSoftDelete": true,
                "softDeleteRetentionInDays": 90,
                "enableRbacAuthorization": true,
                "publicNetworkAccess": "Disabled",
                "networkAcls": {
                  "defaultAction": "Deny",
                  "bypass": "AzureServices"
                }
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}-pe', variables('keyVaultName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointsSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pe-connection', variables('keyVaultName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                      "groupIds": [
                        "vault"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', format('{0}-pe', variables('keyVaultName')), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "privatelink-vaultcore-azure-net",
                    "properties": {
                      "privateDnsZoneId": "[parameters('keyVaultDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', variables('keyVaultName')))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-09-01",
              "name": "[variables('storageAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "StorageV2",
              "properties": {
                "dnsEndpointType": "Standard",
                "defaultToOAuthAuthentication": false,
                "publicNetworkAccess": "Disabled",
                "allowCrossTenantReplication": false,
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": false,
                "allowSharedKeyAccess": false,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "virtualNetworkRules": [],
                  "ipRules": [],
                  "defaultAction": "Deny"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "requireInfrastructureEncryption": false,
                  "services": {
                    "file": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "blob": {
                      "keyType": "Account",
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/default/mldata', variables('storageAccountName'))]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/default/models', variables('storageAccountName'))]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/default/artifacts', variables('storageAccountName'))]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}-blob-pe', variables('storageAccountName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointsSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-blob-connection', variables('storageAccountName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                      "groupIds": [
                        "blob"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', format('{0}-blob-pe', variables('storageAccountName')), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "privatelink-blob-core-windows-net",
                    "properties": {
                      "privateDnsZoneId": "[parameters('blobDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-blob-pe', variables('storageAccountName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}-file-pe', variables('storageAccountName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointsSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-file-connection', variables('storageAccountName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                      "groupIds": [
                        "file"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', format('{0}-file-pe', variables('storageAccountName')), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "privatelink-file-core-windows-net",
                    "properties": {
                      "privateDnsZoneId": "[parameters('fileDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-file-pe', variables('storageAccountName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}-queue-pe', variables('storageAccountName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointsSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-queue-connection', variables('storageAccountName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                      "groupIds": [
                        "queue"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}-table-pe', variables('storageAccountName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointsSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-table-connection', variables('storageAccountName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                      "groupIds": [
                        "table"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2023-01-01-preview",
              "name": "[variables('containerRegistryName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Premium"
              },
              "properties": {
                "adminUserEnabled": false,
                "publicNetworkAccess": "Disabled",
                "zoneRedundancy": "Disabled",
                "networkRuleSet": {
                  "defaultAction": "Deny"
                },
                "policies": {
                  "quarantinePolicy": {
                    "status": "disabled"
                  },
                  "trustPolicy": {
                    "type": "Notary",
                    "status": "disabled"
                  },
                  "retentionPolicy": {
                    "days": 7,
                    "status": "disabled"
                  },
                  "exportPolicy": {
                    "status": "enabled"
                  },
                  "azureADAuthenticationAsArmPolicy": {
                    "status": "enabled"
                  },
                  "softDeletePolicy": {
                    "retentionDays": 7,
                    "status": "disabled"
                  }
                },
                "encryption": {
                  "status": "disabled"
                },
                "dataEndpointEnabled": false,
                "networkRuleBypassOptions": "AzureServices"
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}-pe', variables('containerRegistryName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointsSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pe-connection', variables('containerRegistryName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))]",
                      "groupIds": [
                        "registry"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', format('{0}-pe', variables('containerRegistryName')), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "privatelink-azurecr-io",
                    "properties": {
                      "privateDnsZoneId": "[parameters('acrDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe', variables('containerRegistryName')))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('principalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('keyVaultName'))]",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                "principalType": "User",
                "principalId": "[parameters('principalId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('principalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', variables('storageAccountName'))]",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalType": "User",
                "principalId": "[parameters('principalId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('principalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', variables('containerRegistryName'))]",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalType": "User",
                "principalId": "[parameters('principalId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))]"
              ]
            }
          ],
          "outputs": {
            "keyVaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            },
            "keyVaultName": {
              "type": "string",
              "value": "[variables('keyVaultName')]"
            },
            "keyVaultUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2022-07-01').vaultUri]"
            },
            "storageAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[variables('storageAccountName')]"
            },
            "containerRegistryId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))]"
            },
            "containerRegistryName": {
              "type": "string",
              "value": "[variables('containerRegistryName')]"
            },
            "containerRegistryLoginServer": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName')), '2023-01-01-preview').loginServer]"
            },
            "storagePublicNetworkAccess": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').publicNetworkAccess]"
            },
            "storageNetworkAclsDefaultAction": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').networkAcls.defaultAction]"
            },
            "storageMinimumTlsVersion": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').minimumTlsVersion]"
            },
            "storageAllowSharedKeyAccess": {
              "type": "bool",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').allowSharedKeyAccess]"
            },
            "storageSupportsHttpsTrafficOnly": {
              "type": "bool",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').supportsHttpsTrafficOnly]"
            },
            "storageBlobPrivateEndpointId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-blob-pe', variables('storageAccountName')))]"
            },
            "storageFilePrivateEndpointId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-file-pe', variables('storageAccountName')))]"
            },
            "storageQueuePrivateEndpointId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-queue-pe', variables('storageAccountName')))]"
            },
            "storageTablePrivateEndpointId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-table-pe', variables('storageAccountName')))]"
            },
            "storageBlobPrivateDnsZoneGroupId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', format('{0}-blob-pe', variables('storageAccountName')), 'default')]"
            },
            "storageFilePrivateDnsZoneGroupId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', format('{0}-file-pe', variables('storageAccountName')), 'default')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'dns')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'network')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "monitoring",
      "resourceGroup": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environmentName": {
            "value": "[parameters('environmentName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "resourceToken": {
            "value": "[variables('resourceToken')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.3.11034",
              "templateHash": "17988558317451208573"
            }
          },
          "parameters": {
            "environmentName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "resourceToken": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "variables": {
            "$fxv#0": {
              "analysisServicesServers": "as",
              "apiManagementService": "apim-",
              "appConfigurationConfigurationStores": "appcs-",
              "appManagedEnvironments": "cae-",
              "appContainerApps": "ca-",
              "authorizationPolicyDefinitions": "policy-",
              "automationAutomationAccounts": "aa-",
              "blueprintBlueprints": "bp-",
              "blueprintBlueprintsArtifacts": "bpa-",
              "cacheRedis": "redis-",
              "cdnProfiles": "cdnp-",
              "cdnProfilesEndpoints": "cdne-",
              "cognitiveServicesAccounts": "cog-",
              "cognitiveServicesFormRecognizer": "cog-fr-",
              "cognitiveServicesTextAnalytics": "cog-ta-",
              "computeAvailabilitySets": "avail-",
              "computeCloudServices": "cld-",
              "computeDiskEncryptionSets": "des-",
              "computeDisks": "disk-",
              "computeGalleries": "gal-",
              "computeSnapshots": "snap-",
              "computeVirtualMachines": "vm-",
              "computeVirtualMachineScaleSets": "vmss-",
              "containerInstanceContainerGroups": "ci-",
              "containerRegistryRegistries": "cr",
              "containerServiceManagedClusters": "aks-",
              "databricksWorkspaces": "dbw-",
              "dataFactoryFactories": "adf-",
              "dataLakeAnalyticsAccounts": "dla-",
              "dataLakeStoreAccounts": "dls-",
              "dataMigrationServices": "dms-",
              "dBforMySQLServers": "mysql-",
              "dBforPostgreSQLServers": "psql-",
              "devicesIotHubs": "iot-",
              "devicesProvisioningServices": "provs-",
              "devicesProvisioningServicesCertificates": "pcert-",
              "documentDBDatabaseAccounts": "cosmos-",
              "eventGridDomains": "evgd-",
              "eventGridTopics": "evgt-",
              "eventHubNamespaces": "evhns-",
              "eventHubNamespacesEventHubs": "evh-",
              "hdInsightClustersHadoop": "hadoop-",
              "hdInsightClustersHbase": "hbase-",
              "hdInsightClustersKafka": "kafka-",
              "hdInsightClustersMl": "mls-",
              "hdInsightClustersSpark": "spark-",
              "hdInsightClustersStorm": "storm-",
              "hybridComputeMachines": "arcs-",
              "hybridKubernetesConnectedClusters": "arck-",
              "insightsActionGroups": "ag-",
              "insightsComponents": "appi-",
              "keyVaultVaults": "kv-",
              "kubernetesConnectedClusters": "arck-",
              "kustoClusters": "dec-",
              "loadTesting": "lt-",
              "logicWorkflows": "logic-",
              "machineLearningServicesWorkspaces": "mlw-",
              "managedIdentityUserAssignedIdentities": "id-",
              "managementManagementGroups": "mg-",
              "migrateAssessmentProjects": "migr-",
              "networkApplicationGateways": "agw-",
              "networkApplicationSecurityGroups": "asg-",
              "networkAzureFirewalls": "afw-",
              "networkBastionHosts": "bas-",
              "networkConnections": "con-",
              "networkDnsZones": "dnsz-",
              "networkExpressRouteCircuits": "erc-",
              "networkFirewallPolicies": "afwp-",
              "networkFirewallPolicyRuleGroups": "wafrg-",
              "networkFrontDoors": "fd-",
              "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
              "networkLoadBalancers": "lb-",
              "networkLoadBalancersInbound": "lbi-",
              "networkLoadBalancersInternal": "lbi-",
              "networkLoadBalancersOutbound": "lbo-",
              "networkLocalNetworkGateways": "lgw-",
              "networkNatGateways": "ng-",
              "networkNetworkInterfaces": "nic-",
              "networkNetworkSecurityGroups": "nsg-",
              "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
              "networkNetworkWatchers": "nw-",
              "networkPrivateDnsZones": "pdnsz-",
              "networkPrivateLinkServices": "pl-",
              "networkPublicIPAddresses": "pip-",
              "networkPublicIPPrefixes": "ippre-",
              "networkRouteFilters": "rf-",
              "networkRouteTables": "rt-",
              "networkRouteTablesRoutes": "udr-",
              "networkTrafficManagerProfiles": "traf-",
              "networkVirtualNetworkGateways": "vgw-",
              "networkVirtualNetworks": "vnet-",
              "networkVirtualNetworksSubnets": "snet-",
              "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
              "networkVirtualWans": "vwan-",
              "networkVpnGateways": "vpng-",
              "networkVpnGatewaysVpnConnections": "vcn-",
              "networkVpnGatewaysVpnSites": "vst-",
              "notificationHubsNamespaces": "ntfns-",
              "notificationHubsNamespacesNotificationHubs": "ntf-",
              "operationalInsightsWorkspaces": "log-",
              "portalDashboards": "dash-",
              "powerBIDedicatedCapacities": "pbi-",
              "purviewAccounts": "pview-",
              "recoveryServicesVaults": "rsv-",
              "resourcesResourceGroups": "rg-",
              "searchSearchServices": "srch-",
              "serviceBusNamespaces": "sb-",
              "serviceBusNamespacesQueues": "sbq-",
              "serviceBusNamespacesTopics": "sbt-",
              "serviceEndPointPolicies": "se-",
              "serviceFabricClusters": "sf-",
              "signalRServiceSignalR": "sigr-",
              "sqlManagedInstances": "sqlmi-",
              "sqlServers": "sql-",
              "sqlServersFirewallRules": "sqlfw-",
              "sqlServersDatabase": "sqldb-",
              "storageStorageAccounts": "st",
              "storageStorageAccountsFileServices": "file-",
              "storageStorageAccountsBlobServices": "blob-",
              "storageStorageAccountsQueueServices": "queue-",
              "storageStorageAccountsTableServices": "table-",
              "streamAnalyticsCluster": "asa-",
              "synapseWorkspaces": "syn-",
              "synapseWorkspacesAnalyticsWorkspaces": "synw-",
              "synapseWorkspacesSqlPoolsDedicated": "syndp-",
              "synapseWorkspacesSqlPoolsSpark": "synsp-",
              "timeSeriesInsightsEnvironments": "tsi-",
              "webServerFarms": "plan-",
              "webSitesAppService": "app-",
              "webSitesAppServiceEnvironment": "ase-",
              "webSitesFunctions": "func-",
              "fabricWorkspaces": "fabric-",
              "fabricCapacities": "fabriccap-"
            },
            "abbrs": "[variables('$fxv#0')]",
            "logAnalyticsName": "[format('{0}{1}-{2}', variables('abbrs').operationalInsightsWorkspaces, parameters('environmentName'), parameters('resourceToken'))]",
            "applicationInsightsName": "[format('{0}{1}-{2}', variables('abbrs').insightsComponents, parameters('environmentName'), parameters('resourceToken'))]"
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2022-10-01",
              "name": "[variables('logAnalyticsName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "name": "PerGB2018"
                },
                "retentionInDays": 90,
                "features": {
                  "enableLogAccessUsingOnlyResourcePermissions": true
                },
                "workspaceCapping": {
                  "dailyQuotaGb": 10
                },
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
              }
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[variables('applicationInsightsName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "Flow_Type": "Redfield",
                "Request_Source": "rest",
                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]",
                "IngestionMode": "LogAnalytics",
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/actionGroups",
              "apiVersion": "2022-06-01",
              "name": "[format('{0}-alerts', parameters('environmentName'))]",
              "location": "Global",
              "tags": "[parameters('tags')]",
              "properties": {
                "groupShortName": "ml-alerts",
                "enabled": true,
                "emailReceivers": [],
                "smsReceivers": [],
                "webhookReceivers": [],
                "azureAppPushReceivers": [],
                "itsmReceivers": [],
                "voiceReceivers": [],
                "logicAppReceivers": [],
                "azureFunctionReceivers": [],
                "armRoleReceivers": []
              }
            }
          ],
          "outputs": {
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "value": "[variables('logAnalyticsName')]"
            },
            "applicationInsightsId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
            },
            "applicationInsightsName": {
              "type": "string",
              "value": "[variables('applicationInsightsName')]"
            },
            "applicationInsightsInstrumentationKey": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').InstrumentationKey]"
            },
            "applicationInsightsConnectionString": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').ConnectionString]"
            },
            "actionGroupId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/actionGroups', format('{0}-alerts', parameters('environmentName')))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "azureml",
      "resourceGroup": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environmentName": {
            "value": "[parameters('environmentName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "resourceToken": {
            "value": "[variables('resourceToken')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'security'), '2025-04-01').outputs.keyVaultName.value]"
          },
          "applicationInsightsName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'monitoring'), '2025-04-01').outputs.applicationInsightsName.value]"
          },
          "containerRegistryName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'security'), '2025-04-01').outputs.containerRegistryName.value]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'security'), '2025-04-01').outputs.storageAccountName.value]"
          },
          "vnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'network'), '2025-04-01').outputs.vnetId.value]"
          },
          "mlWorkspaceSubnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'network'), '2025-04-01').outputs.mlWorkspaceSubnetId.value]"
          },
          "computeSubnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'network'), '2025-04-01').outputs.computeSubnetId.value]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.3.11034",
              "templateHash": "4716890982667505227"
            }
          },
          "parameters": {
            "environmentName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "resourceToken": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "applicationInsightsName": {
              "type": "string"
            },
            "containerRegistryName": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "vnetId": {
              "type": "string"
            },
            "mlWorkspaceSubnetId": {
              "type": "string"
            },
            "computeSubnetId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "variables": {
            "$fxv#0": {
              "analysisServicesServers": "as",
              "apiManagementService": "apim-",
              "appConfigurationConfigurationStores": "appcs-",
              "appManagedEnvironments": "cae-",
              "appContainerApps": "ca-",
              "authorizationPolicyDefinitions": "policy-",
              "automationAutomationAccounts": "aa-",
              "blueprintBlueprints": "bp-",
              "blueprintBlueprintsArtifacts": "bpa-",
              "cacheRedis": "redis-",
              "cdnProfiles": "cdnp-",
              "cdnProfilesEndpoints": "cdne-",
              "cognitiveServicesAccounts": "cog-",
              "cognitiveServicesFormRecognizer": "cog-fr-",
              "cognitiveServicesTextAnalytics": "cog-ta-",
              "computeAvailabilitySets": "avail-",
              "computeCloudServices": "cld-",
              "computeDiskEncryptionSets": "des-",
              "computeDisks": "disk-",
              "computeGalleries": "gal-",
              "computeSnapshots": "snap-",
              "computeVirtualMachines": "vm-",
              "computeVirtualMachineScaleSets": "vmss-",
              "containerInstanceContainerGroups": "ci-",
              "containerRegistryRegistries": "cr",
              "containerServiceManagedClusters": "aks-",
              "databricksWorkspaces": "dbw-",
              "dataFactoryFactories": "adf-",
              "dataLakeAnalyticsAccounts": "dla-",
              "dataLakeStoreAccounts": "dls-",
              "dataMigrationServices": "dms-",
              "dBforMySQLServers": "mysql-",
              "dBforPostgreSQLServers": "psql-",
              "devicesIotHubs": "iot-",
              "devicesProvisioningServices": "provs-",
              "devicesProvisioningServicesCertificates": "pcert-",
              "documentDBDatabaseAccounts": "cosmos-",
              "eventGridDomains": "evgd-",
              "eventGridTopics": "evgt-",
              "eventHubNamespaces": "evhns-",
              "eventHubNamespacesEventHubs": "evh-",
              "hdInsightClustersHadoop": "hadoop-",
              "hdInsightClustersHbase": "hbase-",
              "hdInsightClustersKafka": "kafka-",
              "hdInsightClustersMl": "mls-",
              "hdInsightClustersSpark": "spark-",
              "hdInsightClustersStorm": "storm-",
              "hybridComputeMachines": "arcs-",
              "hybridKubernetesConnectedClusters": "arck-",
              "insightsActionGroups": "ag-",
              "insightsComponents": "appi-",
              "keyVaultVaults": "kv-",
              "kubernetesConnectedClusters": "arck-",
              "kustoClusters": "dec-",
              "loadTesting": "lt-",
              "logicWorkflows": "logic-",
              "machineLearningServicesWorkspaces": "mlw-",
              "managedIdentityUserAssignedIdentities": "id-",
              "managementManagementGroups": "mg-",
              "migrateAssessmentProjects": "migr-",
              "networkApplicationGateways": "agw-",
              "networkApplicationSecurityGroups": "asg-",
              "networkAzureFirewalls": "afw-",
              "networkBastionHosts": "bas-",
              "networkConnections": "con-",
              "networkDnsZones": "dnsz-",
              "networkExpressRouteCircuits": "erc-",
              "networkFirewallPolicies": "afwp-",
              "networkFirewallPolicyRuleGroups": "wafrg-",
              "networkFrontDoors": "fd-",
              "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
              "networkLoadBalancers": "lb-",
              "networkLoadBalancersInbound": "lbi-",
              "networkLoadBalancersInternal": "lbi-",
              "networkLoadBalancersOutbound": "lbo-",
              "networkLocalNetworkGateways": "lgw-",
              "networkNatGateways": "ng-",
              "networkNetworkInterfaces": "nic-",
              "networkNetworkSecurityGroups": "nsg-",
              "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
              "networkNetworkWatchers": "nw-",
              "networkPrivateDnsZones": "pdnsz-",
              "networkPrivateLinkServices": "pl-",
              "networkPublicIPAddresses": "pip-",
              "networkPublicIPPrefixes": "ippre-",
              "networkRouteFilters": "rf-",
              "networkRouteTables": "rt-",
              "networkRouteTablesRoutes": "udr-",
              "networkTrafficManagerProfiles": "traf-",
              "networkVirtualNetworkGateways": "vgw-",
              "networkVirtualNetworks": "vnet-",
              "networkVirtualNetworksSubnets": "snet-",
              "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
              "networkVirtualWans": "vwan-",
              "networkVpnGateways": "vpng-",
              "networkVpnGatewaysVpnConnections": "vcn-",
              "networkVpnGatewaysVpnSites": "vst-",
              "notificationHubsNamespaces": "ntfns-",
              "notificationHubsNamespacesNotificationHubs": "ntf-",
              "operationalInsightsWorkspaces": "log-",
              "portalDashboards": "dash-",
              "powerBIDedicatedCapacities": "pbi-",
              "purviewAccounts": "pview-",
              "recoveryServicesVaults": "rsv-",
              "resourcesResourceGroups": "rg-",
              "searchSearchServices": "srch-",
              "serviceBusNamespaces": "sb-",
              "serviceBusNamespacesQueues": "sbq-",
              "serviceBusNamespacesTopics": "sbt-",
              "serviceEndPointPolicies": "se-",
              "serviceFabricClusters": "sf-",
              "signalRServiceSignalR": "sigr-",
              "sqlManagedInstances": "sqlmi-",
              "sqlServers": "sql-",
              "sqlServersFirewallRules": "sqlfw-",
              "sqlServersDatabase": "sqldb-",
              "storageStorageAccounts": "st",
              "storageStorageAccountsFileServices": "file-",
              "storageStorageAccountsBlobServices": "blob-",
              "storageStorageAccountsQueueServices": "queue-",
              "storageStorageAccountsTableServices": "table-",
              "streamAnalyticsCluster": "asa-",
              "synapseWorkspaces": "syn-",
              "synapseWorkspacesAnalyticsWorkspaces": "synw-",
              "synapseWorkspacesSqlPoolsDedicated": "syndp-",
              "synapseWorkspacesSqlPoolsSpark": "synsp-",
              "timeSeriesInsightsEnvironments": "tsi-",
              "webServerFarms": "plan-",
              "webSitesAppService": "app-",
              "webSitesAppServiceEnvironment": "ase-",
              "webSitesFunctions": "func-",
              "fabricWorkspaces": "fabric-",
              "fabricCapacities": "fabriccap-"
            },
            "abbrs": "[variables('$fxv#0')]",
            "workspaceName": "[take(format('{0}{1}{2}', variables('abbrs').machineLearningServicesWorkspaces, replace(parameters('environmentName'), '-', ''), parameters('resourceToken')), 33)]"
          },
          "resources": [
            {
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2023-04-01",
              "name": "[variables('workspaceName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "friendlyName": "[format('{0} ML Workspace', parameters('environmentName'))]",
                "description": "Azure ML workspace for predictive analytics and model training",
                "keyVault": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "applicationInsights": "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]",
                "containerRegistry": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]",
                "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "publicNetworkAccess": "Enabled",
                "discoveryUrl": "[format('https://{0}.api.azureml.ms/discovery', parameters('location'))]"
              }
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces/computes",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}/{1}', variables('workspaceName'), 'training-cluster')]",
              "location": "[parameters('location')]",
              "properties": {
                "computeType": "AmlCompute",
                "properties": {
                  "vmSize": "Standard_DS3_v2",
                  "vmPriority": "Dedicated",
                  "scaleSettings": {
                    "minNodeCount": 0,
                    "maxNodeCount": 4,
                    "nodeIdleTimeBeforeScaleDown": "PT2M"
                  },
                  "enableNodePublicIp": true,
                  "subnet": {
                    "id": "[parameters('computeSubnetId')]"
                  },
                  "osType": "Linux"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', variables('workspaceName'))]"
              ]
            }
          ],
          "outputs": {
            "workspaceName": {
              "type": "string",
              "value": "[variables('workspaceName')]"
            },
            "workspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.MachineLearningServices/workspaces', variables('workspaceName'))]"
            },
            "workspaceUrl": {
              "type": "string",
              "value": "[format('https://ml.azure.com/workspaces/{0}', resourceId('Microsoft.MachineLearningServices/workspaces', variables('workspaceName')))]"
            },
            "computeClusterName": {
              "type": "string",
              "value": "training-cluster"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'monitoring')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'network')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'security')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "fabric",
      "resourceGroup": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environmentName": {
            "value": "[parameters('environmentName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "resourceToken": {
            "value": "[variables('resourceToken')]"
          },
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "fabricAdminEmail": {
            "value": "[parameters('fabricAdminEmail')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.3.11034",
              "templateHash": "5201966803976246953"
            }
          },
          "parameters": {
            "environmentName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "resourceToken": {
              "type": "string"
            },
            "principalId": {
              "type": "string",
              "defaultValue": ""
            },
            "fabricAdminEmail": {
              "type": "string",
              "defaultValue": ""
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "variables": {
            "$fxv#0": {
              "analysisServicesServers": "as",
              "apiManagementService": "apim-",
              "appConfigurationConfigurationStores": "appcs-",
              "appManagedEnvironments": "cae-",
              "appContainerApps": "ca-",
              "authorizationPolicyDefinitions": "policy-",
              "automationAutomationAccounts": "aa-",
              "blueprintBlueprints": "bp-",
              "blueprintBlueprintsArtifacts": "bpa-",
              "cacheRedis": "redis-",
              "cdnProfiles": "cdnp-",
              "cdnProfilesEndpoints": "cdne-",
              "cognitiveServicesAccounts": "cog-",
              "cognitiveServicesFormRecognizer": "cog-fr-",
              "cognitiveServicesTextAnalytics": "cog-ta-",
              "computeAvailabilitySets": "avail-",
              "computeCloudServices": "cld-",
              "computeDiskEncryptionSets": "des-",
              "computeDisks": "disk-",
              "computeGalleries": "gal-",
              "computeSnapshots": "snap-",
              "computeVirtualMachines": "vm-",
              "computeVirtualMachineScaleSets": "vmss-",
              "containerInstanceContainerGroups": "ci-",
              "containerRegistryRegistries": "cr",
              "containerServiceManagedClusters": "aks-",
              "databricksWorkspaces": "dbw-",
              "dataFactoryFactories": "adf-",
              "dataLakeAnalyticsAccounts": "dla-",
              "dataLakeStoreAccounts": "dls-",
              "dataMigrationServices": "dms-",
              "dBforMySQLServers": "mysql-",
              "dBforPostgreSQLServers": "psql-",
              "devicesIotHubs": "iot-",
              "devicesProvisioningServices": "provs-",
              "devicesProvisioningServicesCertificates": "pcert-",
              "documentDBDatabaseAccounts": "cosmos-",
              "eventGridDomains": "evgd-",
              "eventGridTopics": "evgt-",
              "eventHubNamespaces": "evhns-",
              "eventHubNamespacesEventHubs": "evh-",
              "hdInsightClustersHadoop": "hadoop-",
              "hdInsightClustersHbase": "hbase-",
              "hdInsightClustersKafka": "kafka-",
              "hdInsightClustersMl": "mls-",
              "hdInsightClustersSpark": "spark-",
              "hdInsightClustersStorm": "storm-",
              "hybridComputeMachines": "arcs-",
              "hybridKubernetesConnectedClusters": "arck-",
              "insightsActionGroups": "ag-",
              "insightsComponents": "appi-",
              "keyVaultVaults": "kv-",
              "kubernetesConnectedClusters": "arck-",
              "kustoClusters": "dec-",
              "loadTesting": "lt-",
              "logicWorkflows": "logic-",
              "machineLearningServicesWorkspaces": "mlw-",
              "managedIdentityUserAssignedIdentities": "id-",
              "managementManagementGroups": "mg-",
              "migrateAssessmentProjects": "migr-",
              "networkApplicationGateways": "agw-",
              "networkApplicationSecurityGroups": "asg-",
              "networkAzureFirewalls": "afw-",
              "networkBastionHosts": "bas-",
              "networkConnections": "con-",
              "networkDnsZones": "dnsz-",
              "networkExpressRouteCircuits": "erc-",
              "networkFirewallPolicies": "afwp-",
              "networkFirewallPolicyRuleGroups": "wafrg-",
              "networkFrontDoors": "fd-",
              "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
              "networkLoadBalancers": "lb-",
              "networkLoadBalancersInbound": "lbi-",
              "networkLoadBalancersInternal": "lbi-",
              "networkLoadBalancersOutbound": "lbo-",
              "networkLocalNetworkGateways": "lgw-",
              "networkNatGateways": "ng-",
              "networkNetworkInterfaces": "nic-",
              "networkNetworkSecurityGroups": "nsg-",
              "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
              "networkNetworkWatchers": "nw-",
              "networkPrivateDnsZones": "pdnsz-",
              "networkPrivateLinkServices": "pl-",
              "networkPublicIPAddresses": "pip-",
              "networkPublicIPPrefixes": "ippre-",
              "networkRouteFilters": "rf-",
              "networkRouteTables": "rt-",
              "networkRouteTablesRoutes": "udr-",
              "networkTrafficManagerProfiles": "traf-",
              "networkVirtualNetworkGateways": "vgw-",
              "networkVirtualNetworks": "vnet-",
              "networkVirtualNetworksSubnets": "snet-",
              "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
              "networkVirtualWans": "vwan-",
              "networkVpnGateways": "vpng-",
              "networkVpnGatewaysVpnConnections": "vcn-",
              "networkVpnGatewaysVpnSites": "vst-",
              "notificationHubsNamespaces": "ntfns-",
              "notificationHubsNamespacesNotificationHubs": "ntf-",
              "operationalInsightsWorkspaces": "log-",
              "portalDashboards": "dash-",
              "powerBIDedicatedCapacities": "pbi-",
              "purviewAccounts": "pview-",
              "recoveryServicesVaults": "rsv-",
              "resourcesResourceGroups": "rg-",
              "searchSearchServices": "srch-",
              "serviceBusNamespaces": "sb-",
              "serviceBusNamespacesQueues": "sbq-",
              "serviceBusNamespacesTopics": "sbt-",
              "serviceEndPointPolicies": "se-",
              "serviceFabricClusters": "sf-",
              "signalRServiceSignalR": "sigr-",
              "sqlManagedInstances": "sqlmi-",
              "sqlServers": "sql-",
              "sqlServersFirewallRules": "sqlfw-",
              "sqlServersDatabase": "sqldb-",
              "storageStorageAccounts": "st",
              "storageStorageAccountsFileServices": "file-",
              "storageStorageAccountsBlobServices": "blob-",
              "storageStorageAccountsQueueServices": "queue-",
              "storageStorageAccountsTableServices": "table-",
              "streamAnalyticsCluster": "asa-",
              "synapseWorkspaces": "syn-",
              "synapseWorkspacesAnalyticsWorkspaces": "synw-",
              "synapseWorkspacesSqlPoolsDedicated": "syndp-",
              "synapseWorkspacesSqlPoolsSpark": "synsp-",
              "timeSeriesInsightsEnvironments": "tsi-",
              "webServerFarms": "plan-",
              "webSitesAppService": "app-",
              "webSitesAppServiceEnvironment": "ase-",
              "webSitesFunctions": "func-",
              "fabricWorkspaces": "fabric-",
              "fabricCapacities": "fabriccap-"
            },
            "abbrs": "[variables('$fxv#0')]",
            "fabricWorkspaceName": "[if(greaterOrEquals(length(replace(format('{0}{1}{2}', variables('abbrs').fabricWorkspaces, parameters('environmentName'), parameters('resourceToken')), '-', '')), 3), take(replace(format('{0}{1}{2}', variables('abbrs').fabricWorkspaces, parameters('environmentName'), parameters('resourceToken')), '-', ''), 63), format('{0}demo', replace(format('{0}{1}{2}', variables('abbrs').fabricWorkspaces, parameters('environmentName'), parameters('resourceToken')), '-', '')))]"
          },
          "resources": [
            {
              "type": "Microsoft.PowerBIDedicated/capacities",
              "apiVersion": "2021-01-01",
              "name": "[variables('fabricWorkspaceName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "A1",
                "tier": "PBIE_Azure"
              },
              "properties": {
                "administration": {
                  "members": "[if(not(empty(parameters('fabricAdminEmail'))), createArray(parameters('fabricAdminEmail')), if(not(empty(parameters('principalId'))), createArray(parameters('principalId')), createArray('brad.stevens@MngEnvMCAP786696.onmicrosoft.com')))]"
                },
                "mode": "Gen2"
              }
            },
            {
              "type": "Microsoft.DataFactory/factories",
              "apiVersion": "2018-06-01",
              "name": "[format('{0}{1}{2}', variables('abbrs').dataFactoryFactories, replace(parameters('environmentName'), '-', ''), parameters('resourceToken'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "publicNetworkAccess": "Enabled"
              }
            },
            {
              "type": "Microsoft.EventHub/namespaces",
              "apiVersion": "2022-10-01-preview",
              "name": "[format('{0}{1}{2}', variables('abbrs').eventHubNamespaces, replace(parameters('environmentName'), '-', ''), parameters('resourceToken'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard",
                "tier": "Standard",
                "capacity": 1
              },
              "properties": {
                "minimumTlsVersion": "1.2",
                "publicNetworkAccess": "Enabled",
                "disableLocalAuth": false,
                "zoneRedundant": false,
                "isAutoInflateEnabled": false,
                "maximumThroughputUnits": 0,
                "kafkaEnabled": true
              }
            },
            {
              "type": "Microsoft.EventHub/namespaces/eventhubs",
              "apiVersion": "2022-10-01-preview",
              "name": "[format('{0}/{1}', format('{0}{1}{2}', variables('abbrs').eventHubNamespaces, replace(parameters('environmentName'), '-', ''), parameters('resourceToken')), 'ml-predictions')]",
              "properties": {
                "messageRetentionInDays": 7,
                "partitionCount": 4,
                "status": "Active"
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', format('{0}{1}{2}', variables('abbrs').eventHubNamespaces, replace(parameters('environmentName'), '-', ''), parameters('resourceToken')))]"
              ]
            }
          ],
          "outputs": {
            "workspaceName": {
              "type": "string",
              "value": "[variables('fabricWorkspaceName')]"
            },
            "workspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.PowerBIDedicated/capacities', variables('fabricWorkspaceName'))]"
            },
            "workspaceUrl": {
              "type": "string",
              "value": "[format('https://app.fabric.microsoft.com/workspaces/{0}', variables('fabricWorkspaceName'))]"
            },
            "dataFactoryName": {
              "type": "string",
              "value": "[format('{0}{1}{2}', variables('abbrs').dataFactoryFactories, replace(parameters('environmentName'), '-', ''), parameters('resourceToken'))]"
            },
            "eventHubNamespaceName": {
              "type": "string",
              "value": "[format('{0}{1}{2}', variables('abbrs').eventHubNamespaces, replace(parameters('environmentName'), '-', ''), parameters('resourceToken'))]"
            },
            "eventHubName": {
              "type": "string",
              "value": "ml-predictions"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]"
      ]
    }
  ],
  "outputs": {
    "AZURE_LOCATION": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "AZURE_TENANT_ID": {
      "type": "string",
      "value": "[tenant().tenantId]"
    },
    "AZURE_RESOURCE_GROUP": {
      "type": "string",
      "value": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]"
    },
    "AZURE_VNET_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'network'), '2025-04-01').outputs.vnetName.value]"
    },
    "AZURE_VNET_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'network'), '2025-04-01').outputs.vnetId.value]"
    },
    "AZURE_ML_WORKSPACE_SUBNET_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'network'), '2025-04-01').outputs.mlWorkspaceSubnetId.value]"
    },
    "AZURE_COMPUTE_SUBNET_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'network'), '2025-04-01').outputs.computeSubnetId.value]"
    },
    "AZURE_PRIVATE_ENDPOINTS_SUBNET_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'network'), '2025-04-01').outputs.privateEndpointsSubnetId.value]"
    },
    "AZURE_BLOB_DNS_ZONE_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'dns'), '2025-04-01').outputs.blobDnsZoneId.value]"
    },
    "AZURE_FILE_DNS_ZONE_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'dns'), '2025-04-01').outputs.fileDnsZoneId.value]"
    },
    "AZURE_KEYVAULT_DNS_ZONE_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'dns'), '2025-04-01').outputs.keyVaultDnsZoneId.value]"
    },
    "AZURE_ACR_DNS_ZONE_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'dns'), '2025-04-01').outputs.acrDnsZoneId.value]"
    },
    "AZURE_AZUREML_DNS_ZONE_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'dns'), '2025-04-01').outputs.azureMLDnsZoneId.value]"
    },
    "AZURE_ML_WORKSPACE_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'azureml'), '2025-04-01').outputs.workspaceName.value]"
    },
    "AZURE_ML_WORKSPACE_URL": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'azureml'), '2025-04-01').outputs.workspaceUrl.value]"
    },
    "FABRIC_WORKSPACE_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'fabric'), '2025-04-01').outputs.workspaceName.value]"
    },
    "FABRIC_WORKSPACE_URL": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'fabric'), '2025-04-01').outputs.workspaceUrl.value]"
    },
    "AZURE_KEY_VAULT_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'security'), '2025-04-01').outputs.keyVaultName.value]"
    },
    "AZURE_APPLICATION_INSIGHTS_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'monitoring'), '2025-04-01').outputs.applicationInsightsName.value]"
    }
  }
}